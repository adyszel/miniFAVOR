var tipuesearch = {"pages":[{"text":"miniFAVOR miniFAVOR Documentation Organization Top Navigation Bar Getting Help miniFAVOR Documentation Welcome to the miniFAVOR documentation.\nThis online documentation is automatically generated from inline comments and static analysis using the FORD tool. Organization The FORD tool is used to document Modern Fortran source code. Top Navigation Bar You can navigate through the source code by using the black navigation bar at the top of this landing page. In addition, the search box on the right side of the top navbar, the following link is available: Source Files : This landing page enumerates the source files associated with the project,\n  includes a graph depicting their interdependencies and links to their dedicated pages. Getting Help If you encounter a problem, have a suggestion, or want to ask a question,\nwe encourage you to post an issue in this projects Github repository by opening a new issue .","tags":"home","loc":"index.html","title":" miniFAVOR "},{"text":"PROGRAM: miniFAVOR PURPOSE:  Entry point for the console application. Contents Programs minifavor Source Code miniFAVOR.f90 Source Code !  miniFAVOR.f90 ! !  FUNCTIONS: !  miniFAVOR - Entry point of console application. ! !**************************************************************************** ! !  PROGRAM: miniFAVOR ! !  PURPOSE:  Entry point for the console application. ! !**************************************************************************** program miniFAVOR use I_O use inputs_h use outputs_h use calc_RTndt use calc_K use calc_cpi implicit none ! Variables character ( len = 64 ) :: fn_IN integer , parameter :: n_IN = 15 integer , parameter :: n_ECHO = n_IN + 1 integer , parameter :: n_OUT = n_IN + 2 integer , parameter :: n_DAT = n_IN + 3 integer :: i , j , num_seeds ! Body of miniFAVOR !Get input file name call random_seed ( size = num_seeds ) call random_seed ( put = [( i , i = 1 , num_seeds )]) print * , 'Input file name:' read ( * , '(a)' ) fn_IN !Read input file call read_IN ( fn_IN , n_IN , n_ECHO ) !Allocate output arrays allocate ( K_hist ( ntime )) allocate ( Chemistry ( nsim , 3 )) allocate ( cpi_hist ( nsim , ntime )) allocate ( CPI_results ( nsim , 3 )) !Initialize output arrays K_hist = 0.0 Chemistry = 0.0 cpi_hist = 0.0 CPI_results = 0.0 !Calculate applied stress intensity factor (SIF) SIF_loop : do j = 1 , ntime K_hist ( j ) = Ki_t ( a , b , stress ( j )) end do SIF_loop !Start looping over number of simulations Vessel_loop : do i = 1 , nsim !Sample chemistry: Chemistry(i,1) is Cu content, Chemistry(i,2) is Ni content call sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate chemistry factor: Chemistry(i,3) is chemistry factor Chemistry ( i , 3 ) = CF ( Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate RTndt for this vessel trial: CPI_results(i,1) is RTndt CPI_results ( i , 1 ) = RTndt ( a , Chemistry ( i , 3 ), fsurf , RTndt0 ) !Start time loop Time_loop : do j = 1 , ntime !Calculate instantaneous cpi(t) cpi_hist ( i , j ) = cpi_t ( K_hist ( j ), CPI_results ( i , 1 ), temp ( j )) end do Time_loop !Calculate CPI for vessel 'i' CPI_results ( i , 2 ) = maxval ( cpi_hist ( i ,:)) !Calculate moving average CPI for trials executed so far CPI_results ( i , 3 ) = sum ( CPI_results (:, 2 )) / i end do Vessel_loop call write_OUT ( fn_IN , n_OUT , n_DAT ) end program miniFAVOR","tags":"","loc":"sourcefile/minifavor.f90.html","title":"miniFAVOR.f90 – miniFAVOR"},{"text":"Contents Modules i_o Source Code I_O.f90 Source Code module I_O implicit none contains subroutine read_IN ( fn_IN , n_IN , n_ECHO ) use inputs_h !Variables integer , intent ( in ) :: n_IN , n_ECHO character ( len = 64 ), intent ( in ) :: fn_IN character ( len = 64 ) :: fn_ECHO integer :: i !Open input file and create echo file open ( unit = n_IN , file = fn_IN , status = 'old' , form = 'formatted' ) fn_ECHO = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.echo' open ( unit = n_ECHO , file = fn_ECHO , status = 'unknown' , form = 'formatted' ) !Read and echo crack depth and vessel thickness read ( n_IN , * ) a , b write ( n_ECHO , '(a25,f10.3,a)' ) 'Crack Depth: ' , a , ' in' write ( n_ECHO , '(a25,f10.3,a)' ) 'Vessel Thickness: ' , b , ' in' !Read and echo number of simulations to be performed andnumber of time steps read ( n_IN , * ) nsim , ntime write ( n_ECHO , '(a25,i10)' ) 'Number of Simulations: ' , nsim write ( n_ECHO , '(a25,i10)' ) 'Number of Time Steps: ' , ntime !Read in and echo type of output to be written read ( n_IN , * ) details write ( n_ECHO , '(a25,l10)' ) 'Detailed output: ' , details !Read and echo embrittlement inputs read ( n_IN , * ) Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content: ' , Cu_ave , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content: ' , Ni_ave , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content STDEV: ' , Cu_sig , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content STDEV: ' , Ni_sig , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'ID Surface Fluence: ' , fsurf , ' n/cm&#94;2' write ( n_ECHO , '(a25,f10.3,a)' ) 'Unirradiated RTndt: ' , RTndt0 , ' degF' !Allocate stress and temperature arrays allocate ( stress ( ntime )) allocate ( temp ( ntime )) !Read and echo stress and temerature inputs write ( n_ECHO , '(a)' ) 'Stress (ksi),      Temperature (degF)' read_transient : do i = 1 , ntime read ( n_IN , * ) stress ( i ), temp ( i ) write ( n_ECHO , '(f10.3,9x,f10.3)' ) stress ( i ), temp ( i ) end do read_transient end subroutine read_IN subroutine write_OUT ( fn_IN , n_OUT , n_DAT ) use inputs_h , only : a , b , nsim , ntime , details , & Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 use outputs_h !Variables character ( len = 64 ), intent ( in ) :: fn_IN integer , intent ( in ) :: n_OUT , n_DAT character ( len = 64 ) :: fn_OUT , fn_DAT integer :: i !Open output file fn_OUT = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.out' open ( unit = n_OUT , file = fn_OUT , status = 'unknown' , form = 'formatted' ) !Write out important outputs summary write ( n_OUT , '(a)' ) 'MiniFAVOR Output Summary' write ( n_OUT , '(a)' ) '/Key inputs/' write ( n_OUT , '(a25,f10.3,a)' ) 'Crack Depth: ' , a , ' in' write ( n_OUT , '(a25,f10.3,a)' ) 'Vessel Thickness: ' , b , ' in' write ( n_OUT , '(a25,i10)' ) 'Number of Simulations: ' , nsim write ( n_OUT , '(a25,f10.3,a)' ) 'Copper Content: ' , Cu_ave , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Nickel Content: ' , Ni_ave , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Copper Content STDEV: ' , Cu_sig , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Nickel Content STDEV: ' , Ni_sig , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'ID Surface Fluence: ' , fsurf , ' n/cm&#94;2' write ( n_OUT , '(a25,f10.3,a)' ) 'Unirradiated RTndt: ' , RTndt0 , ' degF' write ( n_OUT , '(a)' ) '/Results/' write ( n_OUT , '(a25,f10.3)' ) 'Final CPI: ' , CPI_results ( nsim , 3 ) write ( n_OUT , '(a25,f10.3,a)' ) 'Minimum crack tip RTndt: ' , & minval ( CPI_results (:, 1 )), ' degF' write ( n_OUT , '(a25,f10.3,a)' ) 'Maximum crack tip  RTndt: ' , & maxval ( CPI_results (:, 1 )), ' degF' write ( n_OUT , '(a25,f10.3,a)' ) 'Average crack tip RTndt: ' , & sum ( CPI_results (:, 1 )) / nsim , ' degF' !Write out detailed output to data file if ( details ) then fn_DAT = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.dat' open ( unit = n_DAT , file = fn_DAT , status = 'unknown' , form = 'formatted' ) write ( n_DAT , '(a)' ) 'MiniFAVOR Detailed Output' write ( n_DAT , '(a)' ) '/Applied SIF (ksi*in&#94;0.5)/' write_SIF : do i = 1 , ntime write ( n_DAT , '(f10.3)' ) K_hist ( i ) end do write_SIF write ( n_DAT , '(a)' ) '/Chemistry Results' write ( n_DAT , '(a)' ) 'Cu content (%),  Ni Content (%), Chemistry Factor CF' write_chem : do i = 1 , nsim write ( n_DAT , '(3f10.3)' ) Chemistry ( i , 1 ), Chemistry ( i , 2 ), Chemistry ( i , 3 ) end do write_chem write ( n_DAT , '(a)' ) '/Vessel CPI data' write ( n_DAT , '(a)' ) 'Vessel RTndt (degF),  Vessel CPI, Cumulative Average CPI' write_CPI : do i = 1 , nsim write ( n_DAT , '(3f10.3)' ) CPI_results ( i , 1 ), CPI_results ( i , 2 ), CPI_results ( i , 3 ) end do write_CPI end if end subroutine write_OUT end module I_O","tags":"","loc":"sourcefile/i_o.f90.html","title":"I_O.f90 – miniFAVOR"},{"text":"Contents Modules inputs_h constants_h outputs_h Source Code Commons.f90 Source Code module inputs_h implicit none real :: a , b integer :: nsim , ntime logical :: details real , dimension (:), allocatable :: stress , temp real :: Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 end module inputs_h module constants_h implicit none real , parameter :: Pi = 4.D0 * DATAN ( 1.D0 ) real , dimension ( 0 : 40 , 7 ), parameter :: CF_weld = reshape (( / & 20 , 20 , 21 , 22 , 24 , 26 , 29 , 32 , 36 , 40 , & 44 , 49 , 52 , 58 , 61 , 66 , 70 , 75 , 79 , 83 , & 88 , 92 , 97 , 101 , 105 , 110 , 113 , 119 , 122 , 128 , & 131 , 136 , 140 , 144 , 149 , 153 , 158 , 162 , 166 , 171 , & 175 , & 20 , 20 , 26 , 35 , 43 , 49 , 52 , 55 , 58 , 61 , & 65 , 68 , 72 , 76 , 79 , 84 , 88 , 92 , 95 , 100 , & 104 , 108 , 112 , 117 , 121 , 126 , 130 , 134 , 138 , 142 , & 146 , 151 , 155 , 160 , 164 , 168 , 172 , 177 , 182 , 185 , & 189 , & 20 , 20 , 27 , 41 , 54 , 67 , 77 , 85 , 90 , 94 , & 97 , 101 , 103 , 106 , 109 , 112 , 115 , 119 , 122 , 126 , & 129 , 133 , 137 , 140 , 144 , 148 , 151 , 155 , 160 , 164 , & 167 , 172 , 175 , 180 , 184 , 187 , 191 , 196 , 200 , 203 , & 207 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 106 , 115 , & 122 , 130 , 135 , 139 , 142 , 146 , 149 , 151 , 154 , 157 , & 160 , 164 , 167 , 169 , 173 , 176 , 180 , 184 , 187 , 191 , & 194 , 198 , 202 , 205 , 209 , 212 , 216 , 220 , 223 , 227 , & 231 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 133 , 144 , 153 , 162 , 168 , 175 , 178 , 184 , 187 , 191 , & 194 , 197 , 200 , 203 , 206 , 209 , 212 , 216 , 218 , 222 , & 225 , 228 , 231 , 234 , 238 , 241 , 245 , 248 , 250 , 254 , & 257 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 172 , 182 , 191 , 199 , 207 , 214 , 220 , & 223 , 229 , 232 , 236 , 239 , 243 , 246 , 249 , 251 , 254 , & 257 , 260 , 263 , 266 , 269 , 272 , 275 , 278 , 281 , 285 , & 288 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 176 , 188 , 200 , 211 , 221 , 230 , 238 , & 245 , 252 , 257 , 263 , 268 , 272 , 276 , 280 , 284 , 287 , & 290 , 293 , 296 , 299 , 302 , 305 , 308 , 311 , 314 , 317 , & 320 / ), [ 41 , 7 ]) end module constants_h module outputs_h implicit none real , dimension (:), allocatable :: K_hist real , dimension (:,:), allocatable :: Chemistry real , dimension (:,:), allocatable :: cpi_hist real , dimension (:,:), allocatable :: CPI_results end module outputs_h","tags":"","loc":"sourcefile/commons.f90.html","title":"Commons.f90 – miniFAVOR"},{"text":"Contents Modules calc_cpi Source Code Calc_cpi.f90 Source Code module calc_cpi implicit none contains !Function to calculate cpi(t) function cpi_t ( K , RTndt , T ) !Variables real :: cpi_t real , intent ( in ) :: K , RTndt , T real :: aKic , bKic , cKic !Calculate aKic, bKic, cKic aKic = 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )) bKic = 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) cKic = 4.0 !Calculate cpi_t if ( K < aKic ) then cpi_t = 0.0 else cpi_t = 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ) end if end function cpi_t end module calc_cpi","tags":"","loc":"sourcefile/calc_cpi.f90.html","title":"Calc_cpi.f90 – miniFAVOR"},{"text":"Contents Modules calc_rtndt Source Code Calc_RTndt.f90 Source Code module calc_RTndt implicit none contains !RTndt_x calculation function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents function CF ( Cu , Ni ) use constants_h , only : CF_weld !Variables real :: CF real , intent ( in ) :: Cu , Ni integer :: Cu_int , Ni_int real :: CF_1 , CF_2 !Calculate indexes for copper interpolation: !  multiply the Cu-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 0.40% Cu_int = int ( Cu * 100 ) if ( Cu_int < 0 ) then Cu_int = 0 else if ( Cu_int > 40 ) then Cu_int = 40 end if !Calculate indexes for nickel interpolation: !  multiply the Ni-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 1.20% Ni_int = int ( Ni * 100 ) if ( Ni_int < 0 ) then Ni_int = 0 else if ( Ni_int > 120 ) then Ni_int = 120 end if !Nickel contents in CF_weld are at intervals of 0.20% nickel Ni_int = int ( Ni_int / 20 ) + 1 !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default CF_1 = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) CF_2 = CF_weld ( Cu_int , Ni_int + 1 ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end select end if end function CF !This subroutine samples the copper and nickel contents based on the nominal value !and the standard deviation subroutine sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Cu_local , Ni_local ) !Variables real , intent ( in ) :: Cu_ave , Ni_ave , Cu_sig , Ni_sig real , intent ( out ) :: Cu_local , Ni_local real :: u , Cu_bar , Cu_sig_star , Cu_sig_local !Sample local copper content based on weld copper sampling procedure Cu_bar = Cu_ave * Cu_sig Cu_sig_star = min ( 0.0718 * Cu_ave , 0.0185 ) call RANDOM_NUMBER ( u ) Cu_sig_local = Cu_bar + Cu_sig_star * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) call RANDOM_NUMBER ( u ) Cu_local = Cu_ave + Cu_sig_local * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) !Sample local nickel content based on weld nickel heat 34B009 & W5214 procedure call RANDOM_NUMBER ( u ) Ni_local = Ni_ave + Ni_sig * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) end subroutine sample_chem end module calc_RTndt","tags":"","loc":"sourcefile/calc_rtndt.f90.html","title":"Calc_RTndt.f90 – miniFAVOR"},{"text":"Contents Modules calc_k Source Code Calc_K.f90 Source Code module calc_K implicit none contains !Function to calculate K(t) function Ki_t ( a , b , stress ) use constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t end module calc_K","tags":"","loc":"sourcefile/calc_k.f90.html","title":"Calc_K.f90 – miniFAVOR"},{"text":"public subroutine read_in(fn_in, n_in, n_echo) Uses inputs_h Arguments Type Intent Optional Attributes Name character(len=64), intent(in) :: fn_in integer, intent(in) :: n_in integer, intent(in) :: n_echo Contents Source Code read_in Source Code subroutine read_IN ( fn_IN , n_IN , n_ECHO ) use inputs_h !Variables integer , intent ( in ) :: n_IN , n_ECHO character ( len = 64 ), intent ( in ) :: fn_IN character ( len = 64 ) :: fn_ECHO integer :: i !Open input file and create echo file open ( unit = n_IN , file = fn_IN , status = 'old' , form = 'formatted' ) fn_ECHO = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.echo' open ( unit = n_ECHO , file = fn_ECHO , status = 'unknown' , form = 'formatted' ) !Read and echo crack depth and vessel thickness read ( n_IN , * ) a , b write ( n_ECHO , '(a25,f10.3,a)' ) 'Crack Depth: ' , a , ' in' write ( n_ECHO , '(a25,f10.3,a)' ) 'Vessel Thickness: ' , b , ' in' !Read and echo number of simulations to be performed andnumber of time steps read ( n_IN , * ) nsim , ntime write ( n_ECHO , '(a25,i10)' ) 'Number of Simulations: ' , nsim write ( n_ECHO , '(a25,i10)' ) 'Number of Time Steps: ' , ntime !Read in and echo type of output to be written read ( n_IN , * ) details write ( n_ECHO , '(a25,l10)' ) 'Detailed output: ' , details !Read and echo embrittlement inputs read ( n_IN , * ) Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content: ' , Cu_ave , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content: ' , Ni_ave , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content STDEV: ' , Cu_sig , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content STDEV: ' , Ni_sig , ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'ID Surface Fluence: ' , fsurf , ' n/cm&#94;2' write ( n_ECHO , '(a25,f10.3,a)' ) 'Unirradiated RTndt: ' , RTndt0 , ' degF' !Allocate stress and temperature arrays allocate ( stress ( ntime )) allocate ( temp ( ntime )) !Read and echo stress and temerature inputs write ( n_ECHO , '(a)' ) 'Stress (ksi),      Temperature (degF)' read_transient : do i = 1 , ntime read ( n_IN , * ) stress ( i ), temp ( i ) write ( n_ECHO , '(f10.3,9x,f10.3)' ) stress ( i ), temp ( i ) end do read_transient end subroutine read_IN","tags":"","loc":"proc/read_in.html","title":"read_in – miniFAVOR"},{"text":"public subroutine write_out(fn_in, n_out, n_dat) Uses inputs_h outputs_h Arguments Type Intent Optional Attributes Name character(len=64), intent(in) :: fn_in integer, intent(in) :: n_out integer, intent(in) :: n_dat Contents Source Code write_out Source Code subroutine write_OUT ( fn_IN , n_OUT , n_DAT ) use inputs_h , only : a , b , nsim , ntime , details , & Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 use outputs_h !Variables character ( len = 64 ), intent ( in ) :: fn_IN integer , intent ( in ) :: n_OUT , n_DAT character ( len = 64 ) :: fn_OUT , fn_DAT integer :: i !Open output file fn_OUT = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.out' open ( unit = n_OUT , file = fn_OUT , status = 'unknown' , form = 'formatted' ) !Write out important outputs summary write ( n_OUT , '(a)' ) 'MiniFAVOR Output Summary' write ( n_OUT , '(a)' ) '/Key inputs/' write ( n_OUT , '(a25,f10.3,a)' ) 'Crack Depth: ' , a , ' in' write ( n_OUT , '(a25,f10.3,a)' ) 'Vessel Thickness: ' , b , ' in' write ( n_OUT , '(a25,i10)' ) 'Number of Simulations: ' , nsim write ( n_OUT , '(a25,f10.3,a)' ) 'Copper Content: ' , Cu_ave , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Nickel Content: ' , Ni_ave , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Copper Content STDEV: ' , Cu_sig , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'Nickel Content STDEV: ' , Ni_sig , ' %' write ( n_OUT , '(a25,f10.3,a)' ) 'ID Surface Fluence: ' , fsurf , ' n/cm&#94;2' write ( n_OUT , '(a25,f10.3,a)' ) 'Unirradiated RTndt: ' , RTndt0 , ' degF' write ( n_OUT , '(a)' ) '/Results/' write ( n_OUT , '(a25,f10.3)' ) 'Final CPI: ' , CPI_results ( nsim , 3 ) write ( n_OUT , '(a25,f10.3,a)' ) 'Minimum crack tip RTndt: ' , & minval ( CPI_results (:, 1 )), ' degF' write ( n_OUT , '(a25,f10.3,a)' ) 'Maximum crack tip  RTndt: ' , & maxval ( CPI_results (:, 1 )), ' degF' write ( n_OUT , '(a25,f10.3,a)' ) 'Average crack tip RTndt: ' , & sum ( CPI_results (:, 1 )) / nsim , ' degF' !Write out detailed output to data file if ( details ) then fn_DAT = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.dat' open ( unit = n_DAT , file = fn_DAT , status = 'unknown' , form = 'formatted' ) write ( n_DAT , '(a)' ) 'MiniFAVOR Detailed Output' write ( n_DAT , '(a)' ) '/Applied SIF (ksi*in&#94;0.5)/' write_SIF : do i = 1 , ntime write ( n_DAT , '(f10.3)' ) K_hist ( i ) end do write_SIF write ( n_DAT , '(a)' ) '/Chemistry Results' write ( n_DAT , '(a)' ) 'Cu content (%),  Ni Content (%), Chemistry Factor CF' write_chem : do i = 1 , nsim write ( n_DAT , '(3f10.3)' ) Chemistry ( i , 1 ), Chemistry ( i , 2 ), Chemistry ( i , 3 ) end do write_chem write ( n_DAT , '(a)' ) '/Vessel CPI data' write ( n_DAT , '(a)' ) 'Vessel RTndt (degF),  Vessel CPI, Cumulative Average CPI' write_CPI : do i = 1 , nsim write ( n_DAT , '(3f10.3)' ) CPI_results ( i , 1 ), CPI_results ( i , 2 ), CPI_results ( i , 3 ) end do write_CPI end if end subroutine write_OUT","tags":"","loc":"proc/write_out.html","title":"write_out – miniFAVOR"},{"text":"public function cpi_t(k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real Contents Source Code cpi_t Source Code function cpi_t ( K , RTndt , T ) !Variables real :: cpi_t real , intent ( in ) :: K , RTndt , T real :: aKic , bKic , cKic !Calculate aKic, bKic, cKic aKic = 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )) bKic = 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) cKic = 4.0 !Calculate cpi_t if ( K < aKic ) then cpi_t = 0.0 else cpi_t = 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ) end if end function cpi_t","tags":"","loc":"proc/cpi_t.html","title":"cpi_t – miniFAVOR"},{"text":"public function cf(cu, ni) Uses constants_h Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real Contents Source Code cf Source Code function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents function CF ( Cu , Ni ) use constants_h , only : CF_weld !Variables real :: CF real , intent ( in ) :: Cu , Ni integer :: Cu_int , Ni_int real :: CF_1 , CF_2 !Calculate indexes for copper interpolation: !  multiply the Cu-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 0.40% Cu_int = int ( Cu * 100 ) if ( Cu_int < 0 ) then Cu_int = 0 else if ( Cu_int > 40 ) then Cu_int = 40 end if !Calculate indexes for nickel interpolation: !  multiply the Ni-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 1.20% Ni_int = int ( Ni * 100 ) if ( Ni_int < 0 ) then Ni_int = 0 else if ( Ni_int > 120 ) then Ni_int = 120 end if !Nickel contents in CF_weld are at intervals of 0.20% nickel Ni_int = int ( Ni_int / 20 ) + 1 !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default CF_1 = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) CF_2 = CF_weld ( Cu_int , Ni_int + 1 ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end select end if end function CF","tags":"","loc":"proc/cf.html","title":"cf – miniFAVOR"},{"text":"public function rtndt(a, cf, fsurf, rtndt0) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 Return Value real Contents Source Code rtndt Source Code function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt","tags":"","loc":"proc/rtndt.html","title":"rtndt – miniFAVOR"},{"text":"public subroutine sample_chem(cu_ave, ni_ave, cu_sig, ni_sig, cu_local, ni_local) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig real, intent(out) :: cu_local real, intent(out) :: ni_local Contents Source Code sample_chem Source Code subroutine sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Cu_local , Ni_local ) !Variables real , intent ( in ) :: Cu_ave , Ni_ave , Cu_sig , Ni_sig real , intent ( out ) :: Cu_local , Ni_local real :: u , Cu_bar , Cu_sig_star , Cu_sig_local !Sample local copper content based on weld copper sampling procedure Cu_bar = Cu_ave * Cu_sig Cu_sig_star = min ( 0.0718 * Cu_ave , 0.0185 ) call RANDOM_NUMBER ( u ) Cu_sig_local = Cu_bar + Cu_sig_star * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) call RANDOM_NUMBER ( u ) Cu_local = Cu_ave + Cu_sig_local * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) !Sample local nickel content based on weld nickel heat 34B009 & W5214 procedure call RANDOM_NUMBER ( u ) Ni_local = Ni_ave + Ni_sig * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) end subroutine sample_chem","tags":"","loc":"proc/sample_chem.html","title":"sample_chem – miniFAVOR"},{"text":"public function ki_t(a, b, stress) Uses constants_h Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real Contents Source Code ki_t Source Code function Ki_t ( a , b , stress ) use constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t","tags":"","loc":"proc/ki_t.html","title":"ki_t – miniFAVOR"},{"text":"Contents Subroutines read_in write_out Subroutines public subroutine read_in (fn_in, n_in, n_echo) Arguments Type Intent Optional Attributes Name character(len=64), intent(in) :: fn_in integer, intent(in) :: n_in integer, intent(in) :: n_echo public subroutine write_out (fn_in, n_out, n_dat) Arguments Type Intent Optional Attributes Name character(len=64), intent(in) :: fn_in integer, intent(in) :: n_out integer, intent(in) :: n_dat","tags":"","loc":"module/i_o.html","title":"i_o – miniFAVOR"},{"text":"Contents Variables a b cu_ave cu_sig details fsurf ni_ave ni_sig nsim ntime rtndt0 stress temp Variables Type Visibility Attributes Name Initial real, public :: a real, public :: b real, public :: cu_ave real, public :: cu_sig logical, public :: details real, public :: fsurf real, public :: ni_ave real, public :: ni_sig integer, public :: nsim integer, public :: ntime real, public :: rtndt0 real, public, dimension(:), allocatable :: stress real, public, dimension(:), allocatable :: temp","tags":"","loc":"module/inputs_h.html","title":"inputs_h – miniFAVOR"},{"text":"Contents Variables cf_weld pi Variables Type Visibility Attributes Name Initial real, public, parameter, dimension(0:40,7) :: cf_weld = reshape((/20, 20, 21, 22, 24, 26, 29, 32, 36, 40, 44, 49, 52, 58, 61, 66, 70, 75, 79, 83, 88, 92, 97, 101, 105, 110, 113, 119, 122, 128, 131, 136, 140, 144, 149, 153, 158, 162, 166, 171, 175, 20, 20, 26, 35, 43, 49, 52, 55, 58, 61, 65, 68, 72, 76, 79, 84, 88, 92, 95, 100, 104, 108, 112, 117, 121, 126, 130, 134, 138, 142, 146, 151, 155, 160, 164, 168, 172, 177, 182, 185, 189, 20, 20, 27, 41, 54, 67, 77, 85, 90, 94, 97, 101, 103, 106, 109, 112, 115, 119, 122, 126, 129, 133, 137, 140, 144, 148, 151, 155, 160, 164, 167, 172, 175, 180, 184, 187, 191, 196, 200, 203, 207, 20, 20, 27, 41, 54, 68, 82, 95, 106, 115, 122, 130, 135, 139, 142, 146, 149, 151, 154, 157, 160, 164, 167, 169, 173, 176, 180, 184, 187, 191, 194, 198, 202, 205, 209, 212, 216, 220, 223, 227, 231, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 133, 144, 153, 162, 168, 175, 178, 184, 187, 191, 194, 197, 200, 203, 206, 209, 212, 216, 218, 222, 225, 228, 231, 234, 238, 241, 245, 248, 250, 254, 257, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 172, 182, 191, 199, 207, 214, 220, 223, 229, 232, 236, 239, 243, 246, 249, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 285, 288, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 176, 188, 200, 211, 221, 230, 238, 245, 252, 257, 263, 268, 272, 276, 280, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320/), [41, 7]) real, public, parameter :: pi = 4.d0*datan(1.d0)","tags":"","loc":"module/constants_h.html","title":"constants_h – miniFAVOR"},{"text":"Contents Variables chemistry cpi_hist cpi_results k_hist Variables Type Visibility Attributes Name Initial real, public, dimension(:,:), allocatable :: chemistry real, public, dimension(:,:), allocatable :: cpi_hist real, public, dimension(:,:), allocatable :: cpi_results real, public, dimension(:), allocatable :: k_hist","tags":"","loc":"module/outputs_h.html","title":"outputs_h – miniFAVOR"},{"text":"Contents Functions cpi_t Functions public function cpi_t (k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real","tags":"","loc":"module/calc_cpi.html","title":"calc_cpi – miniFAVOR"},{"text":"Contents Functions cf rtndt Subroutines sample_chem Functions public function cf (cu, ni) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real public function rtndt (a, cf, fsurf, rtndt0) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 Return Value real Subroutines public subroutine sample_chem (cu_ave, ni_ave, cu_sig, ni_sig, cu_local, ni_local) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig real, intent(out) :: cu_local real, intent(out) :: ni_local","tags":"","loc":"module/calc_rtndt.html","title":"calc_rtndt – miniFAVOR"},{"text":"Contents Functions ki_t Functions public function ki_t (a, b, stress) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real","tags":"","loc":"module/calc_k.html","title":"calc_k – miniFAVOR"},{"text":"Uses i_o inputs_h outputs_h calc_rtndt calc_k calc_cpi Contents Variables fn_in i j n_dat n_echo n_in n_out num_seeds Source Code minifavor Variables Type Attributes Name Initial character(len=64) :: fn_in integer :: i integer :: j integer, parameter :: n_dat = n_in+3 integer, parameter :: n_echo = n_in+1 integer, parameter :: n_in = 15 integer, parameter :: n_out = n_in+2 integer :: num_seeds Source Code program miniFAVOR use I_O use inputs_h use outputs_h use calc_RTndt use calc_K use calc_cpi implicit none ! Variables character ( len = 64 ) :: fn_IN integer , parameter :: n_IN = 15 integer , parameter :: n_ECHO = n_IN + 1 integer , parameter :: n_OUT = n_IN + 2 integer , parameter :: n_DAT = n_IN + 3 integer :: i , j , num_seeds ! Body of miniFAVOR !Get input file name call random_seed ( size = num_seeds ) call random_seed ( put = [( i , i = 1 , num_seeds )]) print * , 'Input file name:' read ( * , '(a)' ) fn_IN !Read input file call read_IN ( fn_IN , n_IN , n_ECHO ) !Allocate output arrays allocate ( K_hist ( ntime )) allocate ( Chemistry ( nsim , 3 )) allocate ( cpi_hist ( nsim , ntime )) allocate ( CPI_results ( nsim , 3 )) !Initialize output arrays K_hist = 0.0 Chemistry = 0.0 cpi_hist = 0.0 CPI_results = 0.0 !Calculate applied stress intensity factor (SIF) SIF_loop : do j = 1 , ntime K_hist ( j ) = Ki_t ( a , b , stress ( j )) end do SIF_loop !Start looping over number of simulations Vessel_loop : do i = 1 , nsim !Sample chemistry: Chemistry(i,1) is Cu content, Chemistry(i,2) is Ni content call sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate chemistry factor: Chemistry(i,3) is chemistry factor Chemistry ( i , 3 ) = CF ( Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate RTndt for this vessel trial: CPI_results(i,1) is RTndt CPI_results ( i , 1 ) = RTndt ( a , Chemistry ( i , 3 ), fsurf , RTndt0 ) !Start time loop Time_loop : do j = 1 , ntime !Calculate instantaneous cpi(t) cpi_hist ( i , j ) = cpi_t ( K_hist ( j ), CPI_results ( i , 1 ), temp ( j )) end do Time_loop !Calculate CPI for vessel 'i' CPI_results ( i , 2 ) = maxval ( cpi_hist ( i ,:)) !Calculate moving average CPI for trials executed so far CPI_results ( i , 3 ) = sum ( CPI_results (:, 2 )) / i end do Vessel_loop call write_OUT ( fn_IN , n_OUT , n_DAT ) end program miniFAVOR","tags":"","loc":"program/minifavor.html","title":"minifavor – miniFAVOR"}]}